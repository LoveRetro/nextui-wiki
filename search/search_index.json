{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"customizing/","title":"Customizing","text":""},{"location":"customizing/#led-controls","title":"LED Controls","text":"<p>Device support</p> <p>NextUI's LED Controls currently only support the TrimUI Brick.</p> <p>Support for the TrimUI Smart Pro will be addressed in a future update.</p> <p>A comment on color reproduction</p> <p>The TrimUI Brick is a budget device with budget LEDs. Don't expect the colors to display accurately.</p>"},{"location":"customizing/#led-control-app","title":"LED Control App","text":"<p>On home screen, select <code>Tools</code>, then select <code>LedControl</code>.</p> <p>The app provides the following options.</p>"},{"location":"customizing/#led-selection","title":"LED Selection","text":"<p>The TrimUI Brick has the following configurable LEDs.</p> <ul> <li>Two LEDs on the front of the device for each function button (F1 &amp; F2)</li> <li>Two LEDs under the triggers (one under L1 &amp; L2 the other under R1 &amp; R2)</li> <li>One LED bar on the top of the device</li> </ul> <p>When in the LED Control App you can use <code>Left Trigger</code> and <code>Right Trigger</code> to cycle between these LEDs.</p>"},{"location":"customizing/#effects","title":"Effects","text":"<p>Each LED can be configured with the following effects.</p> Effect Name Description Static Keep the LED(s) on and static Blink 1 Quickly blink 1 time Blink 2 Quickly blinks 2 times Linear Slowly increase the brightness and then fall back to off Breathe Slowly increase the brightness and slowly decrease the brightness Interval Breathe Slowly increase the brightness and slowly decrease the brightness, with a longer pause between \"breaths\""},{"location":"customizing/#color","title":"Color","text":"<p>The color of LEDs. Use <code>Left</code> and <code>Right</code> on the <code>D-Pad</code> to cycle through the colors.</p>"},{"location":"customizing/#speed","title":"Speed","text":"<p>The speed of breathing effect in milliseconds.</p>"},{"location":"customizing/#brightness","title":"Brightness","text":"<p>The brightness level of the LEDs. Setting this to <code>0</code> will turn the LED off.</p>"},{"location":"customizing/#info-brightness","title":"Info Brightness","text":"<p>The brightness of LED when informing you about something.</p> <p>Currently, this is only supported by:</p> <ul> <li>Power Button turning red alerting for low battery</li> <li>Front Function Button LED blinking when entering sleep</li> </ul> <p>Setting brightness to <code>0</code> will turn the LED off.</p>"},{"location":"customizing/#ambient-mode","title":"Ambient Mode","text":"<p>Only supported By certain emulator cores</p> <p>Ambient light effects are only supported by the built in Libretro cores.</p> <p>Ambient light mode makes your LEDs change color to match the dominant color on screen during gameplay.</p> <p>To enable ambient mode (in a supported emulator) follow these steps:</p> <ol> <li>While in game, press the <code>Menu</code> button</li> <li>Select <code>Options</code></li> <li>Select <code>Frontend</code></li> <li>Scroll down to the Ambient Mode line and turn it on. You can select to use all LEDs or just a specific one.</li> </ol> <p>Ambient mode sets the LED Brightness to Maximum</p> <p>We found that lower brightness levels will result in displaying an incorrect color.</p>"},{"location":"customizing/#emulator-overlays","title":"Emulator Overlays","text":"<p>Overlays are only supported by libretro emulators</p> <p>Standalone emulators installed via Paks do not support NextUI overlays.</p> <p>NextUI looks for accompanying media for each emulator under the <code>/Overlays/[System]</code> folder. The <code>System</code> corresponds to the name of the Emu Pak specified in your Emulator folder name within parenthesis. In this folder you can add 5 overlay PNG files, named overlay1.png to overlay5.png.</p> <p>For example:</p> <pre><code># For /Roms/Game Boy Advance (GBA)\n/Overlays/GBA/overlay1.png\n/Overlays/GBA/overlay2.png\n/Overlays/GBA/overlay3.png\n/Overlays/GBA/overlay4.png\n/Overlays/GBA/overlay5.png\n\n# For /Roms/Super Nintendo Entertainment System (SFC)\n/Overlays/SFC/overlay1.png\n/Overlays/SFC/overlay2.png\n/Overlays/SFC/overlay3.png\n/Overlays/SFC/overlay4.png\n/Overlays/SFC/overlay5.png\n</code></pre> <p>When in game, hit the <code>Menu</code> button and navigate to <code>Options -&gt; Frontend</code>. This will display an overlay setting to choose between overlay 1 to 5 or none.</p>"},{"location":"customizing/#adding-emulator-icons","title":"Adding Emulator Icons","text":"<p>Create a <code>.media</code> directory under the corresponding folder to create icons for Emulators, Collections and Tools.</p>"},{"location":"customizing/#emulator-icon-directory-structure","title":"Emulator Icon Directory Structure","text":"<pre><code>Example System Used: Game Boy Advance (MGBA)\nExample Rom Used:    My Awesome Game.gba\nExample Pak Used:    Artwork Scraper.pak\n\n\nSD_CARD\n\u251c\u2500 bg.png                                      *Default Menu Background\n\u251c\u2500 .media/\n\u2502  \u251c\u2500 Collections.png                          *Collections List Icon in Main Menu\n\u2502  \u251c\u2500 Recently Played.png                      *Recently Played List Icon In Main Menu\n\u251c\u2500 Collections/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Collections List Background\n\u2502  \u2502  \u251c\u2500 Collection 1.png                      *Collection Icon In Collections List\n\u2502  \u2502  \u251c\u2500 Collection 2.png                      *Collection Icon In Collections List\n\u251c\u2500 Overlays/\n\u2502  \u251c\u2500 MGBA/\n\u2502  \u2502  \u251c\u2500 overlay1.png                          *MGBA System Overlay #1\n\u2502  \u2502  \u251c\u2500 overlay2.png                          *MGBA System Overlay #2\n\u2502  \u2502  \u251c\u2500 overlay3.png                          *MGBA System Overlay #3\n\u2502  \u2502  \u251c\u2500 overlay4.png                          *MGBA System Overlay #4\n\u2502  \u2502  \u251c\u2500 overlay5.png                          *MGBA System Overlay #5\n\u251c\u2500 Recently Played/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Recently Played List Menu Background\n\u251c\u2500 Roms/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 Game Boy Advance (MGBA).png          *Main Menu Console Icon\n\u2502  \u251c\u2500 Game Boy Advance (MGBA)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *MGBA Rom List Background\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png                *Box Art / In-game Preview\n\u2502  \u2502  \u251c\u2500 My Awesome Game.gba                   *Rom Location\n\u251c\u2500 Screenshots/\n\u2502  \u251c\u2500 screenshot.png                           *Screenshot Monitor Pak PNG Output Location\n\u251c\u2500 Tools/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 tg5040.png                            *Tools list Icon in Main Menu\n\u2502  \u251c\u2500 tg5040/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *Tools List Main Menu Background\n\u2502  \u2502  \u2502  \u251c\u2500 Artwork Scraper.png                *Individual Tool Icon in Tools List\n</code></pre>"},{"location":"customizing/#game-artwork","title":"Game Artwork","text":"<p>NextUI looks for accompanying media for each emulator under <code>/Roms/[Emulator]/.media</code>.</p> <p>To add artwork:</p> <ol> <li>Create the <code>.media</code> folder if it does not exist.</li> <li>In the <code>.media</code> folder, add an image in <code>PNG</code> format with the exact same name as the ROM file (NextUI will automatically scale the artwork).</li> </ol> <p>Here's an example:</p> <pre><code># With an SFC game located at:\n# /Roms/SFC/My Awesome Game.smc\n# the box art or in-game preview is located at:\n\n/Roms/SFC/.media/My Awesome Game.png\n</code></pre> <p>The Artwork Scraper pak can also be used to automatically download artwork for your device.</p>"},{"location":"customizing/#custom-categories","title":"Custom Categories","text":"<p>If folders have the same name prior to the brackets for the emulator, they will be merged. So make one for each emulator, then create subfolders for the systems that use that emulator (note in the second pic you can still use numbers to order the consoles.</p>"},{"location":"customizing/#emulator-directory-structure","title":"Emulator Directory Structure","text":"<pre><code>Example Systems Used: Game Boy (GB), Game Boy Advance (MGBA), NES (FC), Sega Genesis (MD)\nExample Rom Used:    My Awesome Game.ext\nExample Pak Used:    Artwork Scraper.pak\n\n\nSD_CARD\n\u251c\u2500 bg.png                                      *Default Menu Background\n\u251c\u2500 .media/\n\u2502  \u251c\u2500 Collections.png                          *Collections List Icon in Main Menu\n\u2502  \u251c\u2500 Recently Played.png                      *Recently Played List Icon In Main Menu\n\u251c\u2500 Collections/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Collections List Background\n\u2502  \u2502  \u251c\u2500 Collection 1.png                      *Collection Icon In Collections List\n\u2502  \u2502  \u251c\u2500 Collection 2.png                      *Collection Icon In Collections List\n\u251c\u2500 Overlays/\n\u2502  \u251c\u2500 MGBA/\n\u2502  \u2502  \u251c\u2500 overlay1.png                          *MGBA System Overlay #1\n\u2502  \u2502  \u251c\u2500 overlay2.png                          *MGBA System Overlay #2\n\u2502  \u2502  \u251c\u2500 overlay3.png                          *MGBA System Overlay #3\n\u2502  \u2502  \u251c\u2500 overlay4.png                          *MGBA System Overlay #4\n\u2502  \u2502  \u251c\u2500 overlay5.png                          *MGBA System Overlay #5\n\u251c\u2500 Recently Played/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Recently Played List Menu Background\n\u251c\u2500 Roms/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 01)Handheld (GB).png               *Main Menu Handheld Icon (match first folder in group)\n\u2502  \u2502  \u251c\u2500 02)Console (FC).png            *Main Menu Console Icon (match first folder in group)\n\u2502  \u2502  \u251c\u2500 03)Arcade (FBN).png            *Main Menu Console Icon\n\u2502  \u2502\n\u2502  \u251c\u2500 01)Handheld (GB)/             *Uses (GB) to store systems using the GB emulator\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)Game Boy.png         *GB system icon\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png              *Background used when highlighting Handheld in the main menu (only required for first folder in group)\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 01)Game Boy                    *The number here sorts the systems in the Handheld screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for GB that will be shown in the Handheld menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.gb          *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 01)Handheld (MGBA)/           *Uses (MGBA) to store systems using the MGBA emulator\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 02)Game Boy Advance.png     *GBA system icon\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 02)Game Boy Advance                    *The number here sorts the systems in the Handheld screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for GBA that will be shown in the Handheld menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.gba         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 02)Console (FC)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)NES.png              *NES system icon\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 01)NES                         *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for NES shown in console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.nes         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 02)Console (MD)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)Sega Genesis.png         *Sega Genesis system icon shown in Console menu\n\u2502  \u2502  \u2502  \u251c\u2500 01)Sega Master System.png       *Sega Master system icon shown in Console menu\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 02)Sega Genesis                    *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for Sega Genesis shown in Console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.md          *Rom file\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 03)Sega Master System                  *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for Sega Master System shown in Console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.sms         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 03)Arcade(FBN)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png              *Background for FBN that will be shown in the Main menu\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png             *Rom boxart\n\u2502  \u2502  \u251c\u2500 My Awesome Game.zip\n</code></pre>"},{"location":"customizing/#notes-for-merged-folders","title":"Notes for Merged Folders","text":"<p>Folders with the same name (with the exception of the brackets) will be merged. To use this functionality, create folders with matching names (ex. Handheld, Console, Nintendo, Sega, etc.) and in brackets, every emulator you will need for the systems you want sorted into here.</p> <p>Think of the folders in 3 tiers SD/Roms/CategoryName(emulator)/Gamesystem/Games</p> <p>In tier 2, Create folders for each system that uses the emulator listed in its parent folder ex. for Console (MD), MD can emulate Sega Genesis, Sega 32x, Sega CD &amp; Sega Master System, so all those system folders should be placed in Console (MD)</p> <p>In tier 3, place all game files. Additionally at this point subfolders can be easily made for subcategories like rom hacks, translations, etc.</p> <p>Icons and background for the merged folders only need to be made for the first folder alphabetically. In the example directory structure above, the icon for Game Boy was titled 01)Handheld (GB).png and the background was placed in Roms/01)Handheld (GB)/.media/bg.png</p> <pre><code>\u251c\u2500 Screenshots/\n\u2502  \u251c\u2500 screenshot.png                           *Screenshot Monitor Pak PNG Output Location\n\u251c\u2500 Tools/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 tg5040.png                            *Tools List Icon in Main Menu\n\u2502  \u251c\u2500 tg5040/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *Tools List Main Menu Background\n\u2502  \u2502  \u2502  \u251c\u2500 Artwork Scraper.png                *Individual Tool Icon in Tools List\n</code></pre>"},{"location":"docs/","title":"Docs Home","text":""},{"location":"docs/#welcome-to-the-nextui-docs","title":"Welcome to the NextUI Docs!","text":"<p>A powerful but understated CFW for TrimUI Brick &amp; Smart Pro. </p> <p>Installation Instructions</p>"},{"location":"docs/#about-nextui","title":"About NextUI","text":"<p>NextUI is a custom firmware (CFW) for the TrimUI Brick &amp; Smart Pro retro gaming handhelds.</p> <p>It was started by @ro8inmorgan as a fork of the popular MinUI CFW so they could implement changes that were determined to be outside the scope of the original project.</p> <p>NextUI quickly took off and became especially popular on the TrimUI devices.</p>"},{"location":"docs/#features","title":"Features","text":"<p>NextUI officially supports the TrimUI Brick and TrimUI Smart Pro gaming handhelds.</p> <p>It features a rebuilt emulation engine and tons of added features outlined below. Note: For other devices we recommend checking out MinUI.</p> <ul> <li>Fixed both screen tearing and sync stutter problems of MinUI by rebuilding the emulator engine core</li> <li>Game switcher menu (OnionOS style) by @frysee</li> <li>High quality audio, due to advanced resampling engine   using libsamplerate (with quality/performance setting per emulator)</li> <li>Much lower latency (average 20ms, 1 frame of 60fps)</li> <li>Shaders!</li> <li>Fully OpenGL/GPU based for faster performance!</li> <li>Native WiFi support</li> <li>Game art/media support</li> <li>Game time tracker!</li> <li>Cheats support</li> <li>Overlays support!</li> <li>Broader zip file support (BZ2, LZMA)</li> <li>Dynamic CPU speed scaling (keeps your device cool and extends battery life, but gives the performance right when   needed)</li> <li>Custom bootlogos contributed by @SolvalouArt</li> <li>Color and font settings to customize the NextUI interface</li> <li>Menu animations</li> <li>LED control, change colors, effects, brightness</li> <li>LED indicators, low battery, stand by, charging (brightness can be set seperately)</li> <li>Haptic feedback in the menu by @ExonakiDev</li> <li>Ambient LED mode\u2014the LEDS act like ambient light TVs for extra immersion. Configurable per emulator</li> <li>Display controls (color temperature, brightness, contrast, saturation, exposure)</li> <li>Configurable FN/Mute switch that can trigger a \"night mode\"\u2014toggle between two sets of custom display settings!</li> <li>Support for automatic NTP time synchronization with timezones and realtime clock (RTC)</li> <li>Deep Sleep mode, gives instant ON and avoids the overheat bug on the Brick   by @zhaofengli</li> <li>Customizable screen and sleep timeout (Including \"Never\")</li> <li>Battery monitoring, including history graph and time left prediction</li> <li>Scrolling animated titles for longer game names</li> <li>Updated and optimized build emulation cores</li> <li>Rumble strength fixed and is now variable as used by the games</li> <li>FBNeo arcade screen rotation</li> <li>PAL mode</li> <li>Next font supports CJK for JP/CN/etc. ROM names</li> <li>Lot of other smaller fixes and optimizations</li> </ul>"},{"location":"docs/#future-plans","title":"Future Plans","text":"<ul> <li> RetroAchievements</li> <li> Bluetooth integrated</li> <li> Configurable function buttons</li> <li> More compatibility testing with different emulators and fix / improve if necessary</li> </ul>"},{"location":"docs/#discord-community","title":"Discord Community","text":"<p>NextUI has a vibrant Discord community. Here you can talk about new and upcoming features, ask for help and contribute to the community.</p> <p>Many of our members produce custom Paks add to the functionality of NextUI.</p> <p>The more artistically inclined among us make custom emulator overlays and themes.</p> <p>Don't be shy, come join us! |   Discord Invite</p>"},{"location":"docs/#kudos","title":"Kudos","text":"<p>Many minds make us whole. NextUI is a product of its community.</p> <p>Special thanks to @shauninman for their original work on MinUI and to @ro8inmorgan and @frysee for their tireless efforts improving the core NextUI experience.</p>"},{"location":"paks/","title":"NextUI Paks","text":"<p>NextUI allows you to add functionality to the system in the form of Paks.</p> <p>These Paks can range from tools to additional emulators.</p>"},{"location":"paks/#community-favorite-paks","title":"Community Favorite Paks","text":"<p>This is a non-exhaustive list of Paks beloved by our community.</p>"},{"location":"paks/#the-must-haves","title":"The Must Haves","text":"<p>Pak Store install, update and manage paks, all on your device!</p> <p>OTA Updater a Pak for updating NextUI on-device (aka OTA), Wi-Fi connection is required</p>"},{"location":"paks/#game-management","title":"Game Management","text":"<p>Artwork Scraper\u2014scrape artwork for your ROMs</p> <p>Collections Manager\u2014make collections of your ROMs to keep them organized</p> <p>Favorites\u2014a Pak to manage favorites collections</p> <p>Gallery\u2014a simple gallery for your screenshots</p> <p>Game Manager\u2014a one-stop pak for all your game management needs</p> <p>Mortar\u2014a download client for RomM and Megathread with built-in Libretro Artwork support</p> <p>Random Game\u2014loads a random game in your game library</p> <p>Screenshot Monitor\u2014allows you to take screenshots using the function keys</p>"},{"location":"paks/#file-management","title":"File Management","text":"<p>Cloud Backups\u2014a Pak to back up saves, screenshots and other folders to cloud storage providers like Google Drive and Dropbox</p> <p>Filebrowser\u2014HTTP Server via Filebrowser, what OnionOS uses</p> <p>FTP Server\u2014via ftpserver, a lighter-weight FTP server implementation</p> <p>FTP Server with Web UI\u2014via SFTPGo, with both FTP and a Web UI</p> <p>HTTP Server\u2014via dufs, what Allium uses</p> <p>Syncthing\u2014runs Syncthing on your device, for syncing against a remote Syncthing server</p>"},{"location":"paks/#theming","title":"Theming","text":"<p>NextUI-Themes\u2014for all theming needs, with import/export functionality and predefined themes</p>"},{"location":"paks/#miscellaneous","title":"Miscellaneous","text":"<p>Simple Mode\u2014a Pak for managing simple mode</p>"},{"location":"paks/#developer-tools","title":"Developer Tools","text":"<p>Developer\u2014keeps the device on while accessing via ADB/SSH</p> <p>Remote Terminal\u2014for remote terminal access over a browser</p> <p>Report\u2014generates a development report for debugging the device</p> <p>SSH Server\u2014for SSH access to the device via dropbear</p> <p>Terminal\u2014for terminal access on the device itself via TermSP</p>"},{"location":"paks/#standalone-emulator-paks","title":"Standalone Emulator Paks","text":"<p>A quick note about standalone emulators!</p> <p>Standalone emulators do not support overlays and are not as tightly integrated into NextUI.</p> <ul> <li>Dreamcast</li> <li>Nintendo DS</li> <li>Nintendo 64</li> <li>Pico-8</li> <li>PSP</li> <li>Portmaster \u2014 TrimUI_EX Not Required!</li> </ul>"},{"location":"paks/#installing-standalone-emulators","title":"Installing Standalone Emulators","text":"<ol> <li>Download the zip file from the releases section of the above GitHub repositories.</li> <li>Unzip the release.</li> <li>Create a folder named <code>Emu</code> at the root of your SD card if it does not already exist.</li> <li>Copy the unzipped Pak to this <code>Emu</code> directory.</li> <li>Follow any additional steps outlined in the respective repository.</li> </ol>"},{"location":"paks/#making-a-pak","title":"Making a Pak","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#getting-started","title":"Getting Started","text":"<p>Read before continuing!</p> <p>NextUI officially supports the TrimUI Brick and the TrimUI Smart Pro.</p> <p>The steps outlined here only apply to these two devices running the stock operating system.</p> <p>Before beginning, please upgrade to the latest version.</p> <p>TrimUI GitHub </p>"},{"location":"usage/#what-you-will-need","title":"What You Will Need","text":"<ul> <li>A TrimUI Brick or TrimUI Smart Pro running the stock operating system.</li> <li>A fresh micro SD card from a reputable vendor (SanDisk, Samsung, etc.)<ul> <li>The size of the card depends on the size of the ROMs you plan to play</li> </ul> </li> <li>Software on your computer to format the SD Card<ul> <li>On macOS, use built-in Disk Utility application</li> <li>On Windows, use SD   Association's SD Memory Card Formatter</li> </ul> </li> <li>The latest release of NextUI from the GitHub Repo .<ul> <li>At minimum, you will need the <code>base.zip</code> file.</li> <li>If you want additional goodies, download <code>extras.zip</code> as well (or download <code>all.zip</code> to get both files in one).</li> </ul> </li> </ul>"},{"location":"usage/#installation-instructions","title":"Installation Instructions","text":"<p>Formatting will erase all data from the SD card. If there is anything important on the card, please back it up.</p> <p>Do not unzip <code>MinUI.zip</code>! Copy it to the root of the SD card as is.</p> <ol> <li>Insert the micro SD card into your computer.</li> <li>Ensure that the SD card is formatted as a FAT32 or exFAT filesystem.<ul> <li>If not, use the specified tools in What you will need to format the card as FAT32/exFAT.</li> </ul> </li> <li>Find and unzip the file you downloaded from the GitHub Releases Page (<code>all.zip</code> or <code>base.zip</code>).</li> <li>Open the unzipped directory and copy all content to the root of your SD card.</li> <li>Eject your SD card safely from your computer and insert it back into your device.</li> <li>Power on your device. A screen will display stating NextUI is being installed.<ul> <li>Be patient while it installs. Do not turn off the power to your device during installation.</li> <li>Your device may turn off after installation is complete.</li> </ul> </li> <li>Turn on your device and enjoy NextUI!</li> </ol>"},{"location":"usage/#updating-an-existing-installation","title":"Updating an Existing Installation","text":"<p>Do not unzip <code>minui.zip</code>! Copy it to the root of the SD card as is.</p> <ol> <li>Eject your NextUI SD Card and insert it into your computer.</li> <li>Download a fresh copy of <code>base.zip</code> from from the GitHub Releases Page.</li> <li>Find and unzip <code>base.zip</code>.</li> <li>Open the unzipped directory and copy <code>miniui.zip</code> and the <code>trimui</code> directory to the root of your SD Card.    You can safely overwrite / replace the <code>trimui</code> directory when performing the copy.</li> <li>Eject your SD card safely from your computer and insert it back into your device.</li> <li>Power on your device. A screen will display stating NextUI is being updated.<ul> <li>Be patient while it updates. Do not turn off the power to your device during the update.</li> <li>Your device may turn off after the update is complete.</li> </ul> </li> <li>Turn on your device and enjoy the update!</li> </ol>"},{"location":"usage/#adding-roms","title":"Adding ROMs","text":"<p>NextUI creates a <code>Roms</code> folder at the SD Card Root containing folders for each console currently supported.</p> <p>You can rename these folders as you like; however, you must keep the uppercase tag name in parentheses in order to retain the mapping to the correct emulator.</p> <p>Example: Nintendo Entertainment System (FC) can be renamed to Nintendo (FC) or NES (FC) or Famicom (FC)</p> <p>If multiple folders share the same name, eg. <code>Game Boy Advance (GBA)</code> and <code>Game Boy Advance (MGBA)</code>, they will be combined into a single menu item containing the ROMs from both folders.</p> <p>A ROM selected from this combined menu item will launch using the emulator in the tag of the folder is lives in.</p>"},{"location":"usage/#disc-based-games","title":"Disc-based games","text":"<p>To streamline launching multi-file disc-based games, place your BIN / CUE files in a folder with the same name as the CUE file.</p> <p>NextUI will automatically launch the CUE file instead of navigating into the folder when selected.</p> <pre><code>Tony Hawk's Pro Skater 2 (USA)/\n  Tony Hawk's Pro Skater 2 (USA).bin\n  Tony Hawk's Pro Skater 2 (USA).cue\n</code></pre> <p>For multi-disc games, follow these steps.</p> <ol> <li>Create a folder for your disc files.</li> <li>Put all the disc files into this folder.</li> <li>Create a <code>.m3u</code> file that matches the name of the folder created in step one.</li> <li>Edit the <code>.m3u</code> file and add the relative path to each disc's .cue file, one file per line.</li> </ol> <p>NextUI will automatically launch the CUE file instead of navigating into the folder when selected.</p> <p>For example, Final Fantasy VII has three discs:</p> <pre><code>Final Fantasy VII (USA)/\n  Final Fantasy VII (USA).m3u\n  Final Fantasy VII (USA) (Disc 1).bin\n  Final Fantasy VII (USA) (Disc 1).cue\n  Final Fantasy VII (USA) (Disc 2).bin\n  Final Fantasy VII (USA) (Disc 2).cue\n  Final Fantasy VII (USA) (Disc 3).bin\n  Final Fantasy VII (USA) (Disc 3).cue\n</code></pre> <p>The <code>.m3u</code> file for FF7 would contain:</p> <pre><code>Final Fantasy VII (USA) (Disc 1).cue\nFinal Fantasy VII (USA) (Disc 2).cue\nFinal Fantasy VII (USA) (Disc 3).cue\n</code></pre> <p>When you are playing a multi-disc game, the NextUI in-game Menu will display the current disc.</p> <p>Use <code>left</code> or <code>right</code> on the D-Pad to change discs.</p> <p>NextUI also supports <code>.chd</code> files and <code>.pbp</code> files under 2GB.</p> <p>Multi-disc games share the same memory card and save state slots across all discs.</p>"},{"location":"usage/#collections","title":"Collections","text":"<p>A collection is just a text file containing an ordered list of full paths to rom, cue, or m3u files. These text files live in the \"Collections\" folder at the root of your SD card, eg. <code>SDCARD_ROOT/Collections/Metroid series.txt</code> might look like this:</p> <pre><code>/Roms/GBA/Metroid Zero Mission.gba\n/Roms/GB/Metroid II.gb\n/Roms/SNES (SFC)/Super Metroid.sfc\n/Roms/GBA/Metroid Fusion.gba\n</code></pre> <p>If you disable all visible folders under 'Roms', the 'Collections' folders contents will populate the main menu instead of being nested in the 'Collections' folder in the UI.</p>"},{"location":"usage/#display-names","title":"Display names","text":"<p>Certain (unsupported arcade) cores require roms to use arcane file names. You can override the display name used throughout NextUI by creating a map.txt in the same folder as the files you want to rename. One line per file, <code>rom.ext</code> followed by a single tab followed by <code>Display Name</code>. You can hide a file by adding a <code>.</code> at the beginning of the display name. eg. The 'Collections' folder needs its own map.txt file as well.</p> <pre><code>neogeo.zip  .Neo Geo Bios\nmslug.zip   Metal Slug\nsf2.zip     Street Fighter II\n</code></pre>"},{"location":"usage/#doom-pwads","title":"Doom PWADs","text":"<p>Warning</p> <p>The PrBoom core requires the <code>prboom.wad</code> IWAD file - which is treated as a Bios file - and that file is available for download here. It can be placed in <code>/Bios/PRBOOM</code>.</p> <p>NextUI supports Doom via the PrBoom Libretro Core, and loads Doom PWAD - or patch wad - files as it's game format. It also uses IWADs (internal Doom WADs) as the Bios files.</p> <p>Note</p> <p>The following documentation will use the fictional <code>NextUI Doom.wad</code> (Doom 1) and <code>NextUI Doom 2.wad</code> (`Doom 2) as the PWADs Megawads being loaded.</p> <p>To setup a PWAD, place it in the <code>/Roms/Doom (PRBOOM)</code> folder on your SD Card.</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom.wad\n</code></pre> <p>PWADs all depend on a particular IWAD as the base for running the PWAD. IWADs are placed in the <code>/Bios/PRBOOM</code> folder, and a list of them is available in the Required BIOS section. If all your PWADs use the same IWAD - for instance, <code>doom1.wad</code> then the IWAD can be placed directly in the <code>/Bios/PRBOOM</code> folder, and PrBoom will load the PWADs as expected.</p> <pre><code>/Bios/PRBOOM/doom1.wad\n</code></pre> <p>Note</p> <p>All IWADs must be named using lowercase characters, including for the file extension.</p> <p>In many cases, you will want to load specific PWADs with specific IWADs. Due to how PrBoom detects IWADs and lacking information about which IWAD is required by a PWAD, PrBoom may load the incorrect IWAD for your PWAD. To combat this, NextUI supports using a <code>doom.version</code> file to specify the correct <code>/Bios/PRBOOM</code> subdirectory to reference. Omitting a <code>doom.version</code> text file will result in the default PrBoom using the default IWAD detection algorithm. It is recommended to use a <code>doom.version</code> text file in conjuction with the <code>m3u</code> text file format commonly used for Disc-based games to tie PWADs to have a clean directory structure.</p> <p>Using <code>NextUI Doom.wad</code> as an example, we would have the following directory structure in our Roms folder:</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom.wad\n/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom.m3u\n/Roms/Doom (PRBOOM)/NextUI Doom/doom.version\n</code></pre> <p>The contents of the newly created <code>NextUI Doom.m3u</code> text would contain:</p> <pre><code>NextUI Doom.wad\n</code></pre> <p>While the newly created <code>doom.version</code> text file would contain the following:</p> <pre><code>doom1\n</code></pre> <p>The <code>doom.version</code> text file maps to a subfolder in the <code>/Bios/PRBOOM</code> folder that should be used to load dependencies, such as the IWAD or custom mp3 files. In the case of Doom 1 (Commercial), the commercial IWAD would be placed on the disk like so:</p> <pre><code>/Bios/PRBOOM/doom1/doom1.wad\n</code></pre> <p>Music for particular IWADs can also be customized by placing the correctly named files into the correct <code>/Bios/PRBOOM</code> subdirectory:</p> <pre><code>/Bios/PRBOOM/doom1/intro.mp3\n/Bios/PRBOOM/doom1/e1m1.mp3\n</code></pre> <p>To load our <code>NextUI Doom 2.wad</code> megawad with only the title music changing, the following would be a sample file structure:</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom 2.wad\n/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom 2.m3u\n/Roms/Doom (PRBOOM)/NextUI Doom/doom.version\n/Bios/PRBOOM/doom2/doom1.wad\n/Bios/PRBOOM/doom2/dm2ttl.mp3\n</code></pre> <p>The contents of <code>NextUI Doom 2.m3u</code> text file would be:</p> <pre><code>NextUI Doom 2.wad\n</code></pre> <p>And the <code>doom.version</code> text file would have the following as it's contents:</p> <pre><code>doom2\n</code></pre>"},{"location":"usage/#required-bios","title":"Required BIOS","text":"<p>Some emulators require or perform better with the official BIOS.</p> <p>NextUI is strictly BYOB and will not provide them nor links to them.</p> <p>Google is your friend.</p> <p>Use the table below to help you find and install the BIOS files you need.</p> <p>BIOS file names are case-sensitive!</p> System Tag File Name(s) BIOS Directory Doom PRBOOM prboom.waddoom.waddoom2.waddoomu.wadplutonia.wadtnt.wadfreedoom.wadfreedoom1.wadfreedoom2.wad SDCARD_ROOT/Bios/PRBOOM/prboom.wadSDCARD_ROOT/Bios/PRBOOM/doom/doom.wadSDCARD_ROOT/Bios/PRBOOM/doom2/doom2.wadSDCARD_ROOT/Bios/PRBOOM/doom-ultimate/doomu.wadSDCARD_ROOT/Bios/PRBOOM/plutonia/plutonia.wadSDCARD_ROOT/Bios/PRBOOM/tnt/tnt.wadSDCARD_ROOT/Bios/PRBOOM/freedoom/freedoom.wadSDCARD_ROOT/Bios/PRBOOM/freedoom1/freedoom1.wadSDCARD_ROOT/Bios/PRBOOM/freedoom2/freedoom2.wad Famicom FC disksys.rom SDCARD_ROOT/Bios/FC/disksys.rom Game Boy GB gb_bios.bin SDCARD_ROOT/Bios/GB/gb_bios.bin Game Boy Color GBC gbc_bios.bin SDCARD_ROOT/Bios/GBC/gbc_bios.bin Game Boy Advance GBA gba_bios.bin SDCARD_ROOT/Bios/GBA/gba_bios.bin Game Boy Advance MGBA gba_bios.bin SDCARD_ROOT/Bios/MGBA/gba_bios.bin Mega Drive / Genesis MD bios_CD_E.binbios_CD_J.binbios_CD_U.bin SDCARD_ROOT/Bios/MD/bios_CD_E.binSDCARD_ROOT/Bios/MD/bios_CD_J.binSDCARD_ROOT/Bios/MD/bios_CD_U.bin Amiga PUAE kick33180.A500kick34005.A500kick34005.CDTVkick37175.A500kick37350.A600kick39106.A1200kick39106.A4000kick40060.CD32kick40060.CD32.extkick40063.A600kick40068.A1200kick40068.A4000 SDCARD_ROOT/Bios/PUAE/kick33180.A500SDCARD_ROOT/Bios/PUAE/kick34005.A500SDCARD_ROOT/Bios/PUAE/kick34005.CDTVSDCARD_ROOT/Bios/PUAE/kick37175.A500SDCARD_ROOT/Bios/PUAE/kick37350.A600SDCARD_ROOT/Bios/PUAE/kick39106.A1200SDCARD_ROOT/Bios/PUAE/kick39106.A4000SDCARD_ROOT/Bios/PUAE/kick40060.CD32SDCARD_ROOT/Bios/PUAE/kick40060.CD32.extSDCARD_ROOT/Bios/PUAE/kick40063.A600SDCARD_ROOT/Bios/PUAE/kick40068.A1200SDCARD_ROOT/Bios/PUAE/kick40068.A4000 PC Engine PCE syscard3.pce SDCARD_ROOT/Bios/PCE/syscard3.pce Pok\u00e9mon Mini PKM bios.min SDCARD_ROOT/Bios/PKM/bios.min Sony PlayStation PS psxonpsp660.bin SDCARD_ROOT/Bios/PS/psxonpsp660.bin Super Game Boy SGB sgb.bios SDCARD_ROOT/Bios/SGB/sgb.bios"},{"location":"usage/#managing-saves","title":"Managing Saves","text":"<p>NextUI places all save files by system in <code>SDCARD_ROOT/Saves</code>.</p>"},{"location":"usage/#retroarch-srm-support","title":"RetroArch .srm Support","text":"<p>By default, NextUI uses the emulator's default save file format.</p> <p>RetroArch .srm save support can be enabled in Settings.</p> <p>After making this change any existing save files will have to be renamed.</p> <p>Directories and files that start with a period are hidden by default.</p> <p>Windows Users: Open File Explorer, click the View Tab, look for the Show / Hide group and check the \"show hidden files\" box.</p> <p>macOS Users: With a Finder window open, use the keyboard shortcut <code>Command + Shift + A</code>.</p>"},{"location":"usage/#managing-cheats","title":"Managing Cheats","text":"<p>Cheats use RetroArch .cht file format. libretro maintains a database of cheats.</p> <p>Cheat filenames needs to match the ROM name, including the ROM extension.</p> <p>Place the cheat file in <code>SDCARD_ROOT/{System}/</code>.</p> <p>Cheat filepath example</p> <p>ROM filename: <code>Super Mario Land (World).zip</code></p> <p>ROM location: <code>SDCARD_ROOT/Roms/GB/</code></p> <p>Cheat file path: <code>/Cheats/GB/Super Mario Land (World).zip.cht</code></p> <p>When a cheat file is detected, it will show up in the \"cheats\" menu item in game.</p> <p>Cheats are not supported by all cores.</p>"},{"location":"customizing/custom-categories/","title":"Custom categories","text":""},{"location":"customizing/custom-categories/#custom-categories","title":"Custom Categories","text":"<p>If folders have the same name prior to the brackets for the emulator, they will be merged. So make one for each emulator, then create subfolders for the systems that use that emulator (note in the second pic you can still use numbers to order the consoles.</p>"},{"location":"customizing/custom-categories/#emulator-directory-structure","title":"Emulator Directory Structure","text":"<pre><code>Example Systems Used: Game Boy (GB), Game Boy Advance (MGBA), NES (FC), Sega Genesis (MD)\nExample Rom Used:    My Awesome Game.ext\nExample Pak Used:    Artwork Scraper.pak\n\n\nSD_CARD\n\u251c\u2500 bg.png                                      *Default Menu Background\n\u251c\u2500 .media/\n\u2502  \u251c\u2500 Collections.png                          *Collections List Icon in Main Menu\n\u2502  \u251c\u2500 Recently Played.png                      *Recently Played List Icon In Main Menu\n\u251c\u2500 Collections/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Collections List Background\n\u2502  \u2502  \u251c\u2500 Collection 1.png                      *Collection Icon In Collections List\n\u2502  \u2502  \u251c\u2500 Collection 2.png                      *Collection Icon In Collections List\n\u251c\u2500 Overlays/\n\u2502  \u251c\u2500 MGBA/\n\u2502  \u2502  \u251c\u2500 overlay1.png                          *MGBA System Overlay #1\n\u2502  \u2502  \u251c\u2500 overlay2.png                          *MGBA System Overlay #2\n\u2502  \u2502  \u251c\u2500 overlay3.png                          *MGBA System Overlay #3\n\u2502  \u2502  \u251c\u2500 overlay4.png                          *MGBA System Overlay #4\n\u2502  \u2502  \u251c\u2500 overlay5.png                          *MGBA System Overlay #5\n\u251c\u2500 Recently Played/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Recently Played List Menu Background\n\u251c\u2500 Roms/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 01)Handheld (GB).png               *Main Menu Handheld Icon (match first folder in group)\n\u2502  \u2502  \u251c\u2500 02)Console (FC).png            *Main Menu Console Icon (match first folder in group)\n\u2502  \u2502  \u251c\u2500 03)Arcade (FBN).png            *Main Menu Console Icon\n\u2502  \u2502\n\u2502  \u251c\u2500 01)Handheld (GB)/             *Uses (GB) to store systems using the GB emulator\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)Game Boy.png         *GB system icon\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png              *Background used when highlighting Handheld in the main menu (only required for first folder in group)\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 01)Game Boy                    *The number here sorts the systems in the Handheld screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for GB that will be shown in the Handheld menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.gb          *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 01)Handheld (MGBA)/           *Uses (MGBA) to store systems using the MGBA emulator\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 02)Game Boy Advance.png     *GBA system icon\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 02)Game Boy Advance                    *The number here sorts the systems in the Handheld screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for GBA that will be shown in the Handheld menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.gba         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 02)Console (FC)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)NES.png              *NES system icon\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 01)NES                         *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for NES shown in console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.nes         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 02)Console (MD)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 01)Sega Genesis.png         *Sega Genesis system icon shown in Console menu\n\u2502  \u2502  \u2502  \u251c\u2500 01)Sega Master System.png       *Sega Master system icon shown in Console menu\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 02)Sega Genesis                    *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for Sega Genesis shown in Console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.md          *Rom file\n\u2502  \u2502  \u2502\n\u2502  \u2502  \u251c\u2500 03)Sega Master System                  *The number here sorts the systems in the Console screen\n\u2502  \u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 bg.png               *Background for Sega Master System shown in Console menu\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png          *Rom boxart\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.sms         *Rom file\n\u2502  \u2502\n\u2502  \u251c\u2500 03)Arcade(FBN)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png              *Background for FBN that will be shown in the Main menu\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png             *Rom boxart\n\u2502  \u2502  \u251c\u2500 My Awesome Game.zip\n</code></pre>"},{"location":"customizing/custom-categories/#notes-for-merged-folders","title":"Notes for Merged Folders","text":"<p>Folders with the same name (with the exception of the brackets) will be merged. To use this functionality, create folders with matching names (ex. Handheld, Console, Nintendo, Sega, etc.) and in brackets, every emulator you will need for the systems you want sorted into here.</p> <p>Think of the folders in 3 tiers SD/Roms/CategoryName(emulator)/Gamesystem/Games</p> <p>In tier 2, Create folders for each system that uses the emulator listed in its parent folder ex. for Console (MD), MD can emulate Sega Genesis, Sega 32x, Sega CD &amp; Sega Master System, so all those system folders should be placed in Console (MD)</p> <p>In tier 3, place all game files. Additionally at this point subfolders can be easily made for subcategories like rom hacks, translations, etc.</p> <p>Icons and background for the merged folders only need to be made for the first folder alphabetically. In the example directory structure above, the icon for Game Boy was titled 01)Handheld (GB).png and the background was placed in Roms/01)Handheld (GB)/.media/bg.png</p> <pre><code>\u251c\u2500 Screenshots/\n\u2502  \u251c\u2500 screenshot.png                           *Screenshot Monitor Pak PNG Output Location\n\u251c\u2500 Tools/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 tg5040.png                            *Tools List Icon in Main Menu\n\u2502  \u251c\u2500 tg5040/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *Tools List Main Menu Background\n\u2502  \u2502  \u2502  \u251c\u2500 Artwork Scraper.png                *Individual Tool Icon in Tools List\n</code></pre>"},{"location":"customizing/game-artwork/","title":"Game artwork","text":""},{"location":"customizing/game-artwork/#game-artwork","title":"Game Artwork","text":"<p>NextUI looks for accompanying media for each emulator under <code>/Roms/[Emulator]/.media</code>.</p> <p>To add artwork:</p> <ol> <li>Create the <code>.media</code> folder if it does not exist.</li> <li>In the <code>.media</code> folder, add an image in <code>PNG</code> format with the exact same name as the ROM file (NextUI will automatically scale the artwork).</li> </ol> <p>Here's an example:</p> <pre><code># With an SFC game located at:\n# /Roms/SFC/My Awesome Game.smc\n# the box art or in-game preview is located at:\n\n/Roms/SFC/.media/My Awesome Game.png\n</code></pre> <p>The Artwork Scraper pak can also be used to automatically download artwork for your device.</p>"},{"location":"customizing/leds/","title":"Leds","text":""},{"location":"customizing/leds/#led-controls","title":"LED Controls","text":"<p>Device support</p> <p>NextUI's LED Controls currently only support the TrimUI Brick.</p> <p>Support for the TrimUI Smart Pro will be addressed in a future update.</p> <p>A comment on color reproduction</p> <p>The TrimUI Brick is a budget device with budget LEDs. Don't expect the colors to display accurately.</p>"},{"location":"customizing/leds/#led-control-app","title":"LED Control App","text":"<p>On home screen, select <code>Tools</code>, then select <code>LedControl</code>.</p> <p>The app provides the following options.</p>"},{"location":"customizing/leds/#led-selection","title":"LED Selection","text":"<p>The TrimUI Brick has the following configurable LEDs.</p> <ul> <li>Two LEDs on the front of the device for each function button (F1 &amp; F2)</li> <li>Two LEDs under the triggers (one under L1 &amp; L2 the other under R1 &amp; R2)</li> <li>One LED bar on the top of the device</li> </ul> <p>When in the LED Control App you can use <code>Left Trigger</code> and <code>Right Trigger</code> to cycle between these LEDs.</p>"},{"location":"customizing/leds/#effects","title":"Effects","text":"<p>Each LED can be configured with the following effects.</p> Effect Name Description Static Keep the LED(s) on and static Blink 1 Quickly blink 1 time Blink 2 Quickly blinks 2 times Linear Slowly increase the brightness and then fall back to off Breathe Slowly increase the brightness and slowly decrease the brightness Interval Breathe Slowly increase the brightness and slowly decrease the brightness, with a longer pause between \"breaths\""},{"location":"customizing/leds/#color","title":"Color","text":"<p>The color of LEDs. Use <code>Left</code> and <code>Right</code> on the <code>D-Pad</code> to cycle through the colors.</p>"},{"location":"customizing/leds/#speed","title":"Speed","text":"<p>The speed of breathing effect in milliseconds.</p>"},{"location":"customizing/leds/#brightness","title":"Brightness","text":"<p>The brightness level of the LEDs. Setting this to <code>0</code> will turn the LED off.</p>"},{"location":"customizing/leds/#info-brightness","title":"Info Brightness","text":"<p>The brightness of LED when informing you about something.</p> <p>Currently, this is only supported by:</p> <ul> <li>Power Button turning red alerting for low battery</li> <li>Front Function Button LED blinking when entering sleep</li> </ul> <p>Setting brightness to <code>0</code> will turn the LED off.</p>"},{"location":"customizing/leds/#ambient-mode","title":"Ambient Mode","text":"<p>Only supported By certain emulator cores</p> <p>Ambient light effects are only supported by the built in Libretro cores.</p> <p>Ambient light mode makes your LEDs change color to match the dominant color on screen during gameplay.</p> <p>To enable ambient mode (in a supported emulator) follow these steps:</p> <ol> <li>While in game, press the <code>Menu</code> button</li> <li>Select <code>Options</code></li> <li>Select <code>Frontend</code></li> <li>Scroll down to the Ambient Mode line and turn it on. You can select to use all LEDs or just a specific one.</li> </ol> <p>Ambient mode sets the LED Brightness to Maximum</p> <p>We found that lower brightness levels will result in displaying an incorrect color.</p>"},{"location":"customizing/theming/emulator-icons/","title":"Emulator icons","text":""},{"location":"customizing/theming/emulator-icons/#adding-emulator-icons","title":"Adding Emulator Icons","text":"<p>Create a <code>.media</code> directory under the corresponding folder to create icons for Emulators, Collections and Tools.</p>"},{"location":"customizing/theming/emulator-icons/#emulator-icon-directory-structure","title":"Emulator Icon Directory Structure","text":"<pre><code>Example System Used: Game Boy Advance (MGBA)\nExample Rom Used:    My Awesome Game.gba\nExample Pak Used:    Artwork Scraper.pak\n\n\nSD_CARD\n\u251c\u2500 bg.png                                      *Default Menu Background\n\u251c\u2500 .media/\n\u2502  \u251c\u2500 Collections.png                          *Collections List Icon in Main Menu\n\u2502  \u251c\u2500 Recently Played.png                      *Recently Played List Icon In Main Menu\n\u251c\u2500 Collections/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Collections List Background\n\u2502  \u2502  \u251c\u2500 Collection 1.png                      *Collection Icon In Collections List\n\u2502  \u2502  \u251c\u2500 Collection 2.png                      *Collection Icon In Collections List\n\u251c\u2500 Overlays/\n\u2502  \u251c\u2500 MGBA/\n\u2502  \u2502  \u251c\u2500 overlay1.png                          *MGBA System Overlay #1\n\u2502  \u2502  \u251c\u2500 overlay2.png                          *MGBA System Overlay #2\n\u2502  \u2502  \u251c\u2500 overlay3.png                          *MGBA System Overlay #3\n\u2502  \u2502  \u251c\u2500 overlay4.png                          *MGBA System Overlay #4\n\u2502  \u2502  \u251c\u2500 overlay5.png                          *MGBA System Overlay #5\n\u251c\u2500 Recently Played/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 bg.png                                *Recently Played List Menu Background\n\u251c\u2500 Roms/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 Game Boy Advance (MGBA).png          *Main Menu Console Icon\n\u2502  \u251c\u2500 Game Boy Advance (MGBA)/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *MGBA Rom List Background\n\u2502  \u2502  \u2502  \u251c\u2500 My Awesome Game.png                *Box Art / In-game Preview\n\u2502  \u2502  \u251c\u2500 My Awesome Game.gba                   *Rom Location\n\u251c\u2500 Screenshots/\n\u2502  \u251c\u2500 screenshot.png                           *Screenshot Monitor Pak PNG Output Location\n\u251c\u2500 Tools/\n\u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u251c\u2500 tg5040.png                            *Tools list Icon in Main Menu\n\u2502  \u251c\u2500 tg5040/\n\u2502  \u2502  \u251c\u2500 .media/\n\u2502  \u2502  \u2502  \u251c\u2500 bg.png                             *Tools List Main Menu Background\n\u2502  \u2502  \u2502  \u251c\u2500 Artwork Scraper.png                *Individual Tool Icon in Tools List\n</code></pre>"},{"location":"customizing/theming/overlays/","title":"Overlays","text":""},{"location":"customizing/theming/overlays/#emulator-overlays","title":"Emulator Overlays","text":"<p>Overlays are only supported by libretro emulators</p> <p>Standalone emulators installed via Paks do not support NextUI overlays.</p> <p>NextUI looks for accompanying media for each emulator under the <code>/Overlays/[System]</code> folder. The <code>System</code> corresponds to the name of the Emu Pak specified in your Emulator folder name within parenthesis. In this folder you can add 5 overlay PNG files, named overlay1.png to overlay5.png.</p> <p>For example:</p> <pre><code># For /Roms/Game Boy Advance (GBA)\n/Overlays/GBA/overlay1.png\n/Overlays/GBA/overlay2.png\n/Overlays/GBA/overlay3.png\n/Overlays/GBA/overlay4.png\n/Overlays/GBA/overlay5.png\n\n# For /Roms/Super Nintendo Entertainment System (SFC)\n/Overlays/SFC/overlay1.png\n/Overlays/SFC/overlay2.png\n/Overlays/SFC/overlay3.png\n/Overlays/SFC/overlay4.png\n/Overlays/SFC/overlay5.png\n</code></pre> <p>When in game, hit the <code>Menu</code> button and navigate to <code>Options -&gt; Frontend</code>. This will display an overlay setting to choose between overlay 1 to 5 or none.</p>"},{"location":"getting-started/","title":"Index","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Read before continuing!</p> <p>NextUI officially supports the TrimUI Brick and the TrimUI Smart Pro.</p> <p>The steps outlined here only apply to these two devices running the stock operating system.</p> <p>Before beginning, please upgrade to the latest version.</p> <p>TrimUI GitHub </p>"},{"location":"getting-started/#what-you-will-need","title":"What You Will Need","text":"<ul> <li>A TrimUI Brick or TrimUI Smart Pro running the stock operating system.</li> <li>A fresh micro SD card from a reputable vendor (SanDisk, Samsung, etc.)<ul> <li>The size of the card depends on the size of the ROMs you plan to play</li> </ul> </li> <li>Software on your computer to format the SD Card<ul> <li>On macOS, use built-in Disk Utility application</li> <li>On Windows, use SD   Association's SD Memory Card Formatter</li> </ul> </li> <li>The latest release of NextUI from the GitHub Repo .<ul> <li>At minimum, you will need the <code>base.zip</code> file.</li> <li>If you want additional goodies, download <code>extras.zip</code> as well (or download <code>all.zip</code> to get both files in one).</li> </ul> </li> </ul>"},{"location":"getting-started/bios/","title":"Bios","text":""},{"location":"getting-started/bios/#required-bios","title":"Required BIOS","text":"<p>Some emulators require or perform better with the official BIOS.</p> <p>NextUI is strictly BYOB and will not provide them nor links to them.</p> <p>Google is your friend.</p> <p>Use the table below to help you find and install the BIOS files you need.</p> <p>BIOS file names are case-sensitive!</p> System Tag File Name(s) BIOS Directory Doom PRBOOM prboom.waddoom.waddoom2.waddoomu.wadplutonia.wadtnt.wadfreedoom.wadfreedoom1.wadfreedoom2.wad SDCARD_ROOT/Bios/PRBOOM/prboom.wadSDCARD_ROOT/Bios/PRBOOM/doom/doom.wadSDCARD_ROOT/Bios/PRBOOM/doom2/doom2.wadSDCARD_ROOT/Bios/PRBOOM/doom-ultimate/doomu.wadSDCARD_ROOT/Bios/PRBOOM/plutonia/plutonia.wadSDCARD_ROOT/Bios/PRBOOM/tnt/tnt.wadSDCARD_ROOT/Bios/PRBOOM/freedoom/freedoom.wadSDCARD_ROOT/Bios/PRBOOM/freedoom1/freedoom1.wadSDCARD_ROOT/Bios/PRBOOM/freedoom2/freedoom2.wad Famicom FC disksys.rom SDCARD_ROOT/Bios/FC/disksys.rom Game Boy GB gb_bios.bin SDCARD_ROOT/Bios/GB/gb_bios.bin Game Boy Color GBC gbc_bios.bin SDCARD_ROOT/Bios/GBC/gbc_bios.bin Game Boy Advance GBA gba_bios.bin SDCARD_ROOT/Bios/GBA/gba_bios.bin Game Boy Advance MGBA gba_bios.bin SDCARD_ROOT/Bios/MGBA/gba_bios.bin Mega Drive / Genesis MD bios_CD_E.binbios_CD_J.binbios_CD_U.bin SDCARD_ROOT/Bios/MD/bios_CD_E.binSDCARD_ROOT/Bios/MD/bios_CD_J.binSDCARD_ROOT/Bios/MD/bios_CD_U.bin Amiga PUAE kick33180.A500kick34005.A500kick34005.CDTVkick37175.A500kick37350.A600kick39106.A1200kick39106.A4000kick40060.CD32kick40060.CD32.extkick40063.A600kick40068.A1200kick40068.A4000 SDCARD_ROOT/Bios/PUAE/kick33180.A500SDCARD_ROOT/Bios/PUAE/kick34005.A500SDCARD_ROOT/Bios/PUAE/kick34005.CDTVSDCARD_ROOT/Bios/PUAE/kick37175.A500SDCARD_ROOT/Bios/PUAE/kick37350.A600SDCARD_ROOT/Bios/PUAE/kick39106.A1200SDCARD_ROOT/Bios/PUAE/kick39106.A4000SDCARD_ROOT/Bios/PUAE/kick40060.CD32SDCARD_ROOT/Bios/PUAE/kick40060.CD32.extSDCARD_ROOT/Bios/PUAE/kick40063.A600SDCARD_ROOT/Bios/PUAE/kick40068.A1200SDCARD_ROOT/Bios/PUAE/kick40068.A4000 PC Engine PCE syscard3.pce SDCARD_ROOT/Bios/PCE/syscard3.pce Pok\u00e9mon Mini PKM bios.min SDCARD_ROOT/Bios/PKM/bios.min Sony PlayStation PS psxonpsp660.bin SDCARD_ROOT/Bios/PS/psxonpsp660.bin Super Game Boy SGB sgb.bios SDCARD_ROOT/Bios/SGB/sgb.bios"},{"location":"getting-started/cheats/","title":"Cheats","text":""},{"location":"getting-started/cheats/#managing-cheats","title":"Managing Cheats","text":"<p>Cheats use RetroArch .cht file format. libretro maintains a database of cheats.</p> <p>Cheat filenames needs to match the ROM name, including the ROM extension.</p> <p>Place the cheat file in <code>SDCARD_ROOT/{System}/</code>.</p> <p>Cheat filepath example</p> <p>ROM filename: <code>Super Mario Land (World).zip</code></p> <p>ROM location: <code>SDCARD_ROOT/Roms/GB/</code></p> <p>Cheat file path: <code>/Cheats/GB/Super Mario Land (World).zip.cht</code></p> <p>When a cheat file is detected, it will show up in the \"cheats\" menu item in game.</p> <p>Cheats are not supported by all cores.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#installation-instructions","title":"Installation Instructions","text":"<p>Formatting will erase all data from the SD card. If there is anything important on the card, please back it up.</p> <p>Do not unzip <code>MinUI.zip</code>! Copy it to the root of the SD card as is.</p> <ol> <li>Insert the micro SD card into your computer.</li> <li>Ensure that the SD card is formatted as a FAT32 or exFAT filesystem.<ul> <li>If not, use the specified tools in What you will need to format the card as FAT32/exFAT.</li> </ul> </li> <li>Find and unzip the file you downloaded from the GitHub Releases Page (<code>all.zip</code> or <code>base.zip</code>).</li> <li>Open the unzipped directory and copy all content to the root of your SD card.</li> <li>Eject your SD card safely from your computer and insert it back into your device.</li> <li>Power on your device. A screen will display stating NextUI is being installed.<ul> <li>Be patient while it installs. Do not turn off the power to your device during installation.</li> <li>Your device may turn off after installation is complete.</li> </ul> </li> <li>Turn on your device and enjoy NextUI!</li> </ol>"},{"location":"getting-started/managing-saves/","title":"Managing saves","text":""},{"location":"getting-started/managing-saves/#managing-saves","title":"Managing Saves","text":"<p>NextUI places all save files by system in <code>SDCARD_ROOT/Saves</code>.</p>"},{"location":"getting-started/managing-saves/#retroarch-srm-support","title":"RetroArch .srm Support","text":"<p>By default, NextUI uses the emulator's default save file format.</p> <p>RetroArch .srm save support can be enabled in Settings.</p> <p>After making this change any existing save files will have to be renamed.</p> <p>Directories and files that start with a period are hidden by default.</p> <p>Windows Users: Open File Explorer, click the View Tab, look for the Show / Hide group and check the \"show hidden files\" box.</p> <p>macOS Users: With a Finder window open, use the keyboard shortcut <code>Command + Shift + A</code>.</p>"},{"location":"getting-started/roms/","title":"Roms","text":""},{"location":"getting-started/roms/#adding-roms","title":"Adding ROMs","text":"<p>NextUI creates a <code>Roms</code> folder at the SD Card Root containing folders for each console currently supported.</p> <p>You can rename these folders as you like; however, you must keep the uppercase tag name in parentheses in order to retain the mapping to the correct emulator.</p> <p>Example: Nintendo Entertainment System (FC) can be renamed to Nintendo (FC) or NES (FC) or Famicom (FC)</p> <p>If multiple folders share the same name, eg. <code>Game Boy Advance (GBA)</code> and <code>Game Boy Advance (MGBA)</code>, they will be combined into a single menu item containing the ROMs from both folders.</p> <p>A ROM selected from this combined menu item will launch using the emulator in the tag of the folder is lives in.</p>"},{"location":"getting-started/roms/#disc-based-games","title":"Disc-based games","text":"<p>To streamline launching multi-file disc-based games, place your BIN / CUE files in a folder with the same name as the CUE file.</p> <p>NextUI will automatically launch the CUE file instead of navigating into the folder when selected.</p> <pre><code>Tony Hawk's Pro Skater 2 (USA)/\n  Tony Hawk's Pro Skater 2 (USA).bin\n  Tony Hawk's Pro Skater 2 (USA).cue\n</code></pre> <p>For multi-disc games, follow these steps.</p> <ol> <li>Create a folder for your disc files.</li> <li>Put all the disc files into this folder.</li> <li>Create a <code>.m3u</code> file that matches the name of the folder created in step one.</li> <li>Edit the <code>.m3u</code> file and add the relative path to each disc's .cue file, one file per line.</li> </ol> <p>NextUI will automatically launch the CUE file instead of navigating into the folder when selected.</p> <p>For example, Final Fantasy VII has three discs:</p> <pre><code>Final Fantasy VII (USA)/\n  Final Fantasy VII (USA).m3u\n  Final Fantasy VII (USA) (Disc 1).bin\n  Final Fantasy VII (USA) (Disc 1).cue\n  Final Fantasy VII (USA) (Disc 2).bin\n  Final Fantasy VII (USA) (Disc 2).cue\n  Final Fantasy VII (USA) (Disc 3).bin\n  Final Fantasy VII (USA) (Disc 3).cue\n</code></pre> <p>The <code>.m3u</code> file for FF7 would contain:</p> <pre><code>Final Fantasy VII (USA) (Disc 1).cue\nFinal Fantasy VII (USA) (Disc 2).cue\nFinal Fantasy VII (USA) (Disc 3).cue\n</code></pre> <p>When you are playing a multi-disc game, the NextUI in-game Menu will display the current disc.</p> <p>Use <code>left</code> or <code>right</code> on the D-Pad to change discs.</p> <p>NextUI also supports <code>.chd</code> files and <code>.pbp</code> files under 2GB.</p> <p>Multi-disc games share the same memory card and save state slots across all discs.</p>"},{"location":"getting-started/roms/#collections","title":"Collections","text":"<p>A collection is just a text file containing an ordered list of full paths to rom, cue, or m3u files. These text files live in the \"Collections\" folder at the root of your SD card, eg. <code>SDCARD_ROOT/Collections/Metroid series.txt</code> might look like this:</p> <pre><code>/Roms/GBA/Metroid Zero Mission.gba\n/Roms/GB/Metroid II.gb\n/Roms/SNES (SFC)/Super Metroid.sfc\n/Roms/GBA/Metroid Fusion.gba\n</code></pre> <p>If you disable all visible folders under 'Roms', the 'Collections' folders contents will populate the main menu instead of being nested in the 'Collections' folder in the UI.</p>"},{"location":"getting-started/roms/#display-names","title":"Display names","text":"<p>Certain (unsupported arcade) cores require roms to use arcane file names. You can override the display name used throughout NextUI by creating a map.txt in the same folder as the files you want to rename. One line per file, <code>rom.ext</code> followed by a single tab followed by <code>Display Name</code>. You can hide a file by adding a <code>.</code> at the beginning of the display name. eg. The 'Collections' folder needs its own map.txt file as well.</p> <pre><code>neogeo.zip  .Neo Geo Bios\nmslug.zip   Metal Slug\nsf2.zip     Street Fighter II\n</code></pre>"},{"location":"getting-started/roms/#doom-pwads","title":"Doom PWADs","text":"<p>Warning</p> <p>The PrBoom core requires the <code>prboom.wad</code> IWAD file - which is treated as a Bios file - and that file is available for download here. It can be placed in <code>/Bios/PRBOOM</code>.</p> <p>NextUI supports Doom via the PrBoom Libretro Core, and loads Doom PWAD - or patch wad - files as it's game format. It also uses IWADs (internal Doom WADs) as the Bios files.</p> <p>Note</p> <p>The following documentation will use the fictional <code>NextUI Doom.wad</code> (Doom 1) and <code>NextUI Doom 2.wad</code> (`Doom 2) as the PWADs Megawads being loaded.</p> <p>To setup a PWAD, place it in the <code>/Roms/Doom (PRBOOM)</code> folder on your SD Card.</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom.wad\n</code></pre> <p>PWADs all depend on a particular IWAD as the base for running the PWAD. IWADs are placed in the <code>/Bios/PRBOOM</code> folder, and a list of them is available in the Required BIOS section. If all your PWADs use the same IWAD - for instance, <code>doom1.wad</code> then the IWAD can be placed directly in the <code>/Bios/PRBOOM</code> folder, and PrBoom will load the PWADs as expected.</p> <pre><code>/Bios/PRBOOM/doom1.wad\n</code></pre> <p>Note</p> <p>All IWADs must be named using lowercase characters, including for the file extension.</p> <p>In many cases, you will want to load specific PWADs with specific IWADs. Due to how PrBoom detects IWADs and lacking information about which IWAD is required by a PWAD, PrBoom may load the incorrect IWAD for your PWAD. To combat this, NextUI supports using a <code>doom.version</code> file to specify the correct <code>/Bios/PRBOOM</code> subdirectory to reference. Omitting a <code>doom.version</code> text file will result in the default PrBoom using the default IWAD detection algorithm. It is recommended to use a <code>doom.version</code> text file in conjuction with the <code>m3u</code> text file format commonly used for Disc-based games to tie PWADs to have a clean directory structure.</p> <p>Using <code>NextUI Doom.wad</code> as an example, we would have the following directory structure in our Roms folder:</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom.wad\n/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom.m3u\n/Roms/Doom (PRBOOM)/NextUI Doom/doom.version\n</code></pre> <p>The contents of the newly created <code>NextUI Doom.m3u</code> text would contain:</p> <pre><code>NextUI Doom.wad\n</code></pre> <p>While the newly created <code>doom.version</code> text file would contain the following:</p> <pre><code>doom1\n</code></pre> <p>The <code>doom.version</code> text file maps to a subfolder in the <code>/Bios/PRBOOM</code> folder that should be used to load dependencies, such as the IWAD or custom mp3 files. In the case of Doom 1 (Commercial), the commercial IWAD would be placed on the disk like so:</p> <pre><code>/Bios/PRBOOM/doom1/doom1.wad\n</code></pre> <p>Music for particular IWADs can also be customized by placing the correctly named files into the correct <code>/Bios/PRBOOM</code> subdirectory:</p> <pre><code>/Bios/PRBOOM/doom1/intro.mp3\n/Bios/PRBOOM/doom1/e1m1.mp3\n</code></pre> <p>To load our <code>NextUI Doom 2.wad</code> megawad with only the title music changing, the following would be a sample file structure:</p> <pre><code>/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom 2.wad\n/Roms/Doom (PRBOOM)/NextUI Doom/NextUI Doom 2.m3u\n/Roms/Doom (PRBOOM)/NextUI Doom/doom.version\n/Bios/PRBOOM/doom2/doom1.wad\n/Bios/PRBOOM/doom2/dm2ttl.mp3\n</code></pre> <p>The contents of <code>NextUI Doom 2.m3u</code> text file would be:</p> <pre><code>NextUI Doom 2.wad\n</code></pre> <p>And the <code>doom.version</code> text file would have the following as it's contents:</p> <pre><code>doom2\n</code></pre>"},{"location":"getting-started/updating/","title":"Updating","text":""},{"location":"getting-started/updating/#updating-an-existing-installation","title":"Updating an Existing Installation","text":"<p>Do not unzip <code>minui.zip</code>! Copy it to the root of the SD card as is.</p> <ol> <li>Eject your NextUI SD Card and insert it into your computer.</li> <li>Download a fresh copy of <code>base.zip</code> from from the GitHub Releases Page.</li> <li>Find and unzip <code>base.zip</code>.</li> <li>Open the unzipped directory and copy <code>miniui.zip</code> and the <code>trimui</code> directory to the root of your SD Card.    You can safely overwrite / replace the <code>trimui</code> directory when performing the copy.</li> <li>Eject your SD card safely from your computer and insert it back into your device.</li> <li>Power on your device. A screen will display stating NextUI is being updated.<ul> <li>Be patient while it updates. Do not turn off the power to your device during the update.</li> <li>Your device may turn off after the update is complete.</li> </ul> </li> <li>Turn on your device and enjoy the update!</li> </ol>"},{"location":"paks/community-favorites/","title":"Community favorites","text":""},{"location":"paks/community-favorites/#community-favorite-paks","title":"Community Favorite Paks","text":"<p>This is a non-exhaustive list of Paks beloved by our community.</p>"},{"location":"paks/community-favorites/#the-must-haves","title":"The Must Haves","text":"<p>Pak Store install, update and manage paks, all on your device!</p> <p>OTA Updater a Pak for updating NextUI on-device (aka OTA), Wi-Fi connection is required</p>"},{"location":"paks/community-favorites/#game-management","title":"Game Management","text":"<p>Artwork Scraper\u2014scrape artwork for your ROMs</p> <p>Collections Manager\u2014make collections of your ROMs to keep them organized</p> <p>Favorites\u2014a Pak to manage favorites collections</p> <p>Gallery\u2014a simple gallery for your screenshots</p> <p>Game Manager\u2014a one-stop pak for all your game management needs</p> <p>Mortar\u2014a download client for RomM and Megathread with built-in Libretro Artwork support</p> <p>Random Game\u2014loads a random game in your game library</p> <p>Screenshot Monitor\u2014allows you to take screenshots using the function keys</p>"},{"location":"paks/community-favorites/#file-management","title":"File Management","text":"<p>Cloud Backups\u2014a Pak to back up saves, screenshots and other folders to cloud storage providers like Google Drive and Dropbox</p> <p>Filebrowser\u2014HTTP Server via Filebrowser, what OnionOS uses</p> <p>FTP Server\u2014via ftpserver, a lighter-weight FTP server implementation</p> <p>FTP Server with Web UI\u2014via SFTPGo, with both FTP and a Web UI</p> <p>HTTP Server\u2014via dufs, what Allium uses</p> <p>Syncthing\u2014runs Syncthing on your device, for syncing against a remote Syncthing server</p>"},{"location":"paks/community-favorites/#theming","title":"Theming","text":"<p>NextUI-Themes\u2014for all theming needs, with import/export functionality and predefined themes</p>"},{"location":"paks/community-favorites/#miscellaneous","title":"Miscellaneous","text":"<p>Simple Mode\u2014a Pak for managing simple mode</p>"},{"location":"paks/community-favorites/#developer-tools","title":"Developer Tools","text":"<p>Developer\u2014keeps the device on while accessing via ADB/SSH</p> <p>Remote Terminal\u2014for remote terminal access over a browser</p> <p>Report\u2014generates a development report for debugging the device</p> <p>SSH Server\u2014for SSH access to the device via dropbear</p> <p>Terminal\u2014for terminal access on the device itself via TermSP</p>"},{"location":"paks/making-a-pak/","title":"Making a pak","text":""},{"location":"paks/making-a-pak/#making-a-pak","title":"Making a Pak","text":""},{"location":"paks/standalone-emulators/","title":"Standalone emulators","text":""},{"location":"paks/standalone-emulators/#standalone-emulator-paks","title":"Standalone Emulator Paks","text":"<p>A quick note about standalone emulators!</p> <p>Standalone emulators do not support overlays and are not as tightly integrated into NextUI.</p> <ul> <li>Dreamcast</li> <li>Nintendo DS</li> <li>Nintendo 64</li> <li>Pico-8</li> <li>PSP</li> <li>Portmaster \u2014 TrimUI_EX Not Required!</li> </ul>"},{"location":"paks/standalone-emulators/#installing-standalone-emulators","title":"Installing Standalone Emulators","text":"<ol> <li>Download the zip file from the releases section of the above GitHub repositories.</li> <li>Unzip the release.</li> <li>Create a folder named <code>Emu</code> at the root of your SD card if it does not already exist.</li> <li>Copy the unzipped Pak to this <code>Emu</code> directory.</li> <li>Follow any additional steps outlined in the respective repository.</li> </ol>"},{"location":"shaders/","title":"Shaders Explanation","text":"<p>A Little Introduction</p> <p>In today's world, most of us have screens with resolutions of at least 1920\u00d71080 and higher. However, back in the days of our favorite retro games, this was far from the case. Older TVs operated at around 720\u00d7525 resolution, and handheld devices like Game Boys had even lower resolutions.</p> <p>While we enjoy our collections of retro games today, there's one big problem: our modern screens usually have resolutions far beyond what these games were originally designed for. In practice, this means we either play our games in a tiny square in the middle of our screens to preserve their original resolution, or (what most of us prefer) we scale the image up to better fit our modern, high-resolution displays.</p> <p>There are three main scaling modes you can choose from in the frontend options under Screen Scaling:</p> <ul> <li>Native\u2014This keeps the game at its original resolution, resulting in that tiny box in the center of your screen.  </li> <li>Aspect\u2014This scales the image to your screen while maintaining the original aspect ratio, so nothing looks distorted (no \"fat\" Super Mario). It scales the image up until either the width or height reaches the screen size. This often leaves empty space on the sides or top and bottom, unless you're lucky enough to have a screen that matches the original aspect ratio exactly.  </li> <li>Full Screen Stretch\u2014This simply stretches the image to fill the entire screen without preserving the aspect ratio. While it fills the screen nicely, it can make things look strange if the original and screen aspect ratios don't match.  </li> </ul> <p>Ultimately, the choice is yours based on what you prefer. However, understanding screen scaling is important because it plays a big role in how shaders are used \u2014 although scaling isn't the only reason shaders are popular, it is a major one.</p>"},{"location":"shaders/#lets-get-shady","title":"Lets Get Shady!","text":"<p>Options \u2192 Frontend \u2192 Screen Sharpness</p> <p>First, let\u2019s talk a little about this option. The GPU in your device basically has two modes to upscale an image to the final screen size.</p> <p>The first is NEAREST, which is faster because it\u2019s less complex. It simply upscales the image by doubling each pixel. This looks very sharp, but it can make an image look too sharp, especially if the input (the output of your emulator core) is at a very small resolution. NEAREST just doubles the pixels until it reaches the desired size.</p> <p>The second option is LINEAR. This costs a little more performance-wise, but instead of just doubling pixels, it applies linear interpolation between pixels, creating a smoother, softer look. This can definitely create a more even, pleasant image \u2014 but again, it depends heavily on what the original source image looks like. If your emulator is outputting a very small image, LINEAR interpolation has to invent a lot of new pixels to fill the screen, and the result can look very blurry.</p> <p> </p> <p>The takeaway here is simple: The smaller the original image the GPU receives to upscale to your screen\u2019s resolution, the worse it will look. Neither NEAREST nor LINEAR can magically make a tiny 320\u00d7240 image look amazing on a big 1024\u00d7768 screen. That\u2019s just been a fact of life since the early days of computers.</p> <p>Now, if you really just want to rawdog the tiny emulator output directly to the screen for maximum performance, I recommend using NEAREST. LINEAR usually just ends up looking too blurry, while NEAREST faithfully replicates the pixels from the source, simply making the image bigger \u2014 simple and sharp.</p> <p>So, does that mean old games will always look like crap on modern screens?</p> <p>Well, no, not really! Welcome to the world of shaders!</p>"},{"location":"shaders/#a-note-on-the-word-shader","title":"A Note on the Word \"Shader\"","text":"<p>Before we dive in, a quick note: The word shader is actually kind of wrong in this context. In emulation, \"shaders\" have become synonymous with \"effects,\" but technically speaking, shaders are just small programs that tell your GPU what to do with pixel data. Every image you see on your screen \u2014 even a simple one without effects \u2014 is being drawn by a shader. Even the most basic output still runs a shader that simply says: \"draw a rectangle the size of the screen and fill it with the emulator's pixel data.\"</p> <p>Okay, with that out of the way \u2014 since we already use shaders to draw the screen, we can also use them to alter the look of the image!</p>"},{"location":"shaders/#making-linear-look-good","title":"Making LINEAR Look Good","text":"<p>Let's start with a very basic idea that already looks great for most systems and might even be all you need:</p> <p>Remember how I said NEAREST is better because LINEAR gets too blurry? Well, LINEAR can actually be awesome \u2014 if we prepare the image a little first.</p> <p>Here\u2019s the problem: When you scale a small image directly up to a big resolution with LINEAR interpolation, the GPU has to invent a lot of made-up pixels, which makes everything blurry. (For example, scaling a 320\u00d7240 image up to 1024\u00d7768 \u2014 almost two-thirds of the final pixels are imaginary! No wonder it looks so bad.)</p> <p>So what if we first scale the image sharply with NEAREST \u2014 and then apply LINEAR interpolation afterward?</p> <p>In other words: First, double (or triple) the sharp pixels with NEAREST, then let LINEAR smooth out only the small leftover gaps. Best of both worlds!</p> <p>Example:</p> <ul> <li>Emulator outputs 320\u00d7240.  </li> <li>First, upscale to 640\u00d7480 using NEAREST (or even 960\u00d7720 if you want).</li> <li>Then, apply LINEAR interpolation when stretching it the rest of the way to your screen\u2019s full resolution.</li> </ul> <p>Result? It looks way better! This is because LINEAR now only has to invent half as many pixels as it\u2019s working with a bigger starting point.</p> <p></p> <p>Pay special attention to how all the pixels on the ground are now equeally square sized, compared to the previous example without shaders where the pixels where unequal because of the stretching. The shaders now made sure everything stretches nicely and the pixels don't deform even though the image is stretched to a different aspect ratio/size than the game's original ones. </p>"},{"location":"shaders/#how-to-set-this-up","title":"How to Set This Up","text":"<p>First, let\u2019s set a shader to upscale the image 2\u00d7 using NEAREST:</p> <p>Go to:</p> <p>Options \u2192 Shaders</p> <p>And set the following: - Number of shaders: 1 (we only need one) - Shader 1: <code>stock.glsl</code> (basic shader that just outputs the input image) - Filter: NEAREST (very important \u2014 we want a sharp, clean NEAREST upscale first!) - Source type: Relative or Source (doesn\u2019t matter \u2014 they\u2019re the same for the first shader) - Texture type: Relative or Source - Scale: 2 or 3  (Use 2\u00d7 for SNES, MD, etc., or 3\u00d7 for very small images like GB/GBC.)</p> <p>What this shader does: It takes the emulator's output, scales it up 2\u00d7 or 3\u00d7 using NEAREST, and passes it on to the next stage (in this case, directly to the screen, since we\u2019re only using one shader).</p> <p>Now, let\u2019s apply the final LINEAR smoothing when outputting to the screen:</p> <p>Go to:</p> <p>Options \u2192 Frontend \u2192 Screen Sharpness</p> <p>And set this to LINEAR.</p> <p>So now:</p> <ul> <li>First, the shader upscales the image 2\u00d7 or 3\u00d7 sharply with NEAREST.</li> <li>Then, the frontend upscales the rest of the way using LINEAR to smooth it out slightly.</li> </ul> <p>And the result already looks MUCH better, right?</p> <p>The first image below is without shaders, just straight NEAREST upscaling to fullscreen. The second one uses the above settings to make things a little  smoother and nicer. This looks really good on the Brick's high DPI screen.  </p>"},{"location":"shaders/#a-few-final-notes","title":"A Few Final Notes","text":"<p>The \"world of shaders\" is all about chaining small steps together \u2014 each shader alters the image slightly before passing it along.</p> <ul> <li>Choosing NEAREST or LINEAR only matters when the step involves resizing. If a shader step uses a Scale of 1 (no scaling), the NEAREST or LINEAR setting has no effect at all. The same goes for the screen sharpness setting in frontend options. If an image already is at screen size before it reaches this final step then the  final filter does nothing because it doesn't have to up or downscale anymore. NEAREST and LINEAR only apply when the image has to resize either up or down. It's not a filter applying to the image, it just tells the GPU what method to use when up (or down) scaling an image. </li> </ul> <p>But like I said shaders are not only used for scaling, since they are just little programs that run on your GPU they can do anything. There are tons of shaders out there (<code>.glsl</code> files) that do all kinds of fun things:</p> <ul> <li>Simulate CRT screens  </li> <li>Mimic Game Boy Advance LCD looks  </li> <li>Apply different smoothing/sharpening algorithms  </li> <li>Add scanlines, fake grid patterns  </li> <li>Distort the screen or enhance colors, etc.  </li> </ul> <p>Feel free to experiment! Try different shaders, different combinations, and find the look that feels best for your games. You can download any .glsl file and place it in the <code>/Shaders</code> folder on your SD card to use it within NextUI. NextUI does not yet support .glsp shader preset files, though these are simple text files and you can open them to view the settings and replicate them in the shaders menu. </p> <p>Enjoy! \ud83c\udfae</p>"},{"location":"shaders/#bonus-gbgbcgba-tip","title":"BONUS: GB/GBC/GBA Tip!","text":"<p>Want to make your Game Boy, Game Boy Color, and Game Boy Advance games look even cooler? Here's a quick bonus trick!</p> <p>Set everything up the same way as above, but now set the number of shaders to 2 and configure the second shader like this:</p> <ul> <li>Number of shaders: 2  </li> <li>Shader 2: <code>lcd3x.glsl</code> (a shader that overlays a pixel grid, simulating old handheld screens)  </li> <li>Filter: NEAREST (NEAREST recommended for a sharp grid, but LINEAR could work more for you)  </li> <li>Source type: Source (important \u2014 I\u2019ll explain why below)  </li> <li>Texture type: Source  </li> <li>Scale: Screen  </li> </ul>"},{"location":"shaders/#what-this-does","title":"What This Does","text":"<p>This setup applies an additional shader called <code>lcd3x</code>, which overlays a grid on the image to mimic the look of original Game Boy, Game Boy Color, and GBA screens. It\u2019s a simple effect, but it adds a lot of nostalgic charm!</p> <p></p>"},{"location":"shaders/#why-use-source-and-screen","title":"Why Use Source and Screen?","text":"<p>Here's the idea:</p> <ul> <li>Setting Source as the Source/Texture Types tells the shader to use the original dimensions from the emulator output \u2014 the real, original pixel layout. However, for the actual pixel data, it still uses the output from the previous shader step.  </li> <li>While we're at it: Relative means \"use the dimensions of the previous shader step,\" and Screen means \"use the dimensions of the screen\" (with aspect ratio correction applied).</li> <li>Setting the Scale to Screen means the shader will output an image with a grid drawn over it (where the grid itself is based on the original pixel size) at the screen\u2019s resolution. The upscaling happens here, and no further upscaling is needed.</li> </ul> <p>So, the <code>lcd3x</code> shader creates a grid based on the original pixel size but with an output size that covers the entire screen. You end up with an LCD-style grid that perfectly matches the original pixel layout, giving each pixel a distinct look \u2014 while in reality, the image is being upscaled to your screen\u2019s full resolution. It looks like your Game Boy screen suddenly has four times as many pixels. If that ain't cool I don't know what is! </p>"},{"location":"shaders/#important-note-about-filtering","title":"Important Note About Filtering","text":"<p>Since Shader 2 is already stretching the image up to full screen, the frontend's Screen Sharpness setting no longer matters. At this point, the image is already at its final size before it even reaches the frontend\u2019s final filter.</p> <p>That means:</p> <p>The final image sharpness is controlled inside Shader 2 itself, not by the frontend option anymore.</p> <p>That's it \u2014 now you\u2019ve got a sharp, beautiful pixel grid overlay just like an old-school Game Boy screen! \ud83c\udfae\ud83d\udda4</p>"},{"location":"support/faq/","title":"Frequently Asked Questions","text":"<p>Here are the answers to questions that come up often. If you have a question that isn't answered here, hit up the Discord  .</p>"},{"location":"support/faq/#where-can-i-download-nextui","title":"Where Can I Download NextUI?","text":"<p>You can always find the latest NextUI release on our GitHub repo.</p>"},{"location":"support/faq/#how-do-i-install-update","title":"How Do I Install / Update?","text":"<p>For a fresh install of NextUI, follow our installation guide.</p> <p>Already a NextUI user? Follow our updating guide to grab the latest release.</p>"},{"location":"support/faq/#what-systems-are-supported","title":"What Systems are Supported?","text":""},{"location":"support/faq/#included-in-the-base-cfw","title":"Included in the Base CFW","text":"<ul> <li>Game Boy (gambatte)</li> <li>Game Boy Color (gambatte)</li> <li>Game Boy Advance (gbsp, mgba)</li> <li>Nintendo Entertainment System (fceumm)</li> <li>Sega 32X (picodrive)</li> <li>Sega CD (picodrive)</li> <li>Sega Game Gear (picodrive)</li> <li>Sega Genesis (picodrive)</li> <li>Sega Master System (picodrive)</li> <li>Sega SG-1000 (picodrive)</li> <li>Sony PlayStation (pcsx_rearmed)</li> <li>Super Nintendo Entertainment System (snes9x, mednafen_supafaust)</li> <li>Super Game Boy (mgba)</li> </ul>"},{"location":"support/faq/#additional-emulators-extrazip","title":"Additional emulators (extra.zip)","text":"<ul> <li>Amiga (puae2021)</li> <li>Amstrad CPC (cap32)</li> <li>Arcade (CPS, MAME, etc - fbneo)</li> <li>Atari 2600 (stella2014)</li> <li>Atari 5200 (a5200)</li> <li>Atari 7800 (prosystem)</li> <li>Commodore 64 (vice_x64)</li> <li>Commodore 128 (vice_x128)</li> <li>Commodore PET (vice_xpet)</li> <li>Commodore Plus4 (vice_xplus4)</li> <li>Commodore VIC20 (vice_xvic)</li> <li>Doom (prboom)</li> <li>Neo Geo Pocket/Color (race)</li> <li>Pico-8 (fake08)</li> <li>Poke\u0301mon mini (pokemini)</li> <li>TurboGrafx-16/TurboGrafx-CD (mednafen_pce_fast)</li> <li>Virtual Boy (mednafen_vb)</li> </ul>"},{"location":"support/faq/#available-as-community-paks","title":"Available as community paks","text":"<ul> <li>DOS (dosbox)</li> <li>Nintendo 64 (mupen64plus)</li> <li>Nintendo DS (DraStic)</li> <li>ScummVM</li> <li>Sega Dreamcast (flycast)</li> <li>Sony PlayStation Portable (PPSSPP)</li> <li>Portmaster</li> <li>Wonderswan (mednafen_wonderswan)</li> </ul>"},{"location":"support/faq/#why-am-i-only-seeing-tools","title":"Why Am I Only Seeing Tools?","text":"<p>Ensure that you have a <code>Roms</code> folder at the root of your SD card with at least one ROM file.</p> <p>For more info, visit the Adding ROMs page.</p>"}]}